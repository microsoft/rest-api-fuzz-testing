{
    "openapi": "3.0.1",
    "info": {
        "title": "RESTler",
        "version": "v2"
    },
    "paths": {},
    "components": {
        "schemas": {
            "CustomDictionary": {
                "type": "object",
                "properties": {
                    "fuzzableString": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of string values used as fuzzing inputs. If null then values are auto-generated",
                        "nullable": true
                    },
                    "fuzzableInt": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of int values used as fuzzing inputs. If null then values are auto-generated",
                        "nullable": true
                    },
                    "fuzzableNumber": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of number values used as fuzzing inputs. If null then values are auto-generated",
                        "nullable": true
                    },
                    "fuzzableBool": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of bool values used as fuzzing inputs. If null then values are auto-generated",
                        "nullable": true
                    },
                    "fuzzableDatetime": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of date-time values used as fuzzing inputs. If null then values are auto-generated",
                        "nullable": true
                    },
                    "fuzzableObject": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of string encoded JSON objects values used as fuzzing inputs",
                        "nullable": true
                    },
                    "fuzzableUuid4": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of UUID4 values used as fuzzing inputs",
                        "nullable": true
                    },
                    "customPayload": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Map of values to use as replacement of parameters defined in Swagger specifications. For example\r\nif { \"userId\" : [\"a\", \"b\"] } is specified then {userId} in URL path /users/{userId} will be replaced\r\nby \"a\" or by \"b\"",
                        "nullable": true
                    },
                    "customPayloadUuid4Suffix": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of values to use as replacement of parameters defined in swagger. The values will\r\nhave a random suffix added. For example {\"publicIpAddressName\": \"publicIpAddrName-\"} will produce publicIpAddrName-f286a0a069 for\r\npublicIpAddressName parameter defined in Swagger specifications.",
                        "nullable": true
                    },
                    "customPayloadHeader": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "User specified custom headers to pass in every request",
                        "nullable": true
                    },
                    "shadowValues": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "RESTler documentation will have more info on this",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CompileConfiguration": {
                "type": "object",
                "properties": {
                    "inputJsonGrammarPath": {
                        "type": "string",
                        "description": "Path to a JSON grammar to use for compilation\r\nIf set then JSON grammar used for compilation instead of Swagger",
                        "nullable": true
                    },
                    "inputFolderPath": {
                        "type": "string",
                        "description": "Grammar is produced by compile step prior. The compile step\r\nfile share is mounted and set here. Agent will not modify\r\nthis share. Agent will make a copy of all needed files to it's work directory\r\nand re-run compile with data passed through this folder.",
                        "nullable": true
                    },
                    "readOnlyFuzz": {
                        "type": "boolean",
                        "description": "When true, only fuzz the GET requests"
                    },
                    "allowGetProducers": {
                        "type": "boolean",
                        "description": "Allows GET requests to be considered.\r\nThis option is present for debugging, and should be\r\nset to 'false' by default.\r\nIn limited cases when GET is a valid producer, the user\r\nshould add an annotation for it."
                    },
                    "useRefreshableToken": {
                        "type": "boolean",
                        "description": "Use refreshable token for authenticating with service under test"
                    },
                    "trackFuzzedParameterNames": {
                        "type": "boolean",
                        "description": "True by default. Every fuzzable primitive will include an additional parameter param_name which is the name of the property\r\nor parameter being fuzzed. These will be used to capture fuzzed parameters\r\nin tracked_parameters in the spec coverage file."
                    },
                    "mutationsSeed": {
                        "type": "integer",
                        "description": "Use the seed to generate random value for empty/null customDictitonary fields\r\nif not set then default hard-coded RESTler values are used for populating customDictionary fields",
                        "format": "int64",
                        "nullable": true
                    },
                    "customDictionary": {
                        "$ref": "#/components/schemas/CustomDictionary"
                    },
                    "useQueryExamples": {
                        "type": "boolean",
                        "description": "Same as useBodyExamples, but for query parameter examples."
                    },
                    "useBodyExamples": {
                        "type": "boolean",
                        "description": "Specifies that the examples referenced in the Swagger specification\r\n(e.g., via the x-ms-examples attribute) for body parameters should be used.\r\nIf there are no examples specified, no error will be issued, and the schema alone will be used to generate the request payload."
                    },
                    "discoverExamples": {
                        "type": "boolean",
                        "description": "If true, any examples found in the Swagger specification are copied to a local directory,\r\nwhich can be configured through the ExamplesDirectory setting (see below).\r\nIf the examples directory is not specified, a new sub-directory named 'examples' is created in the output directory.\r\nIf true, an examples metadata file named examples.json will also be generated in the examples directory.\r\nThis file can be augmented with additional examples, and passed as an input to the compilation using the ExampleConfigFilePath parameter"
                    },
                    "exampleConfigFilePath": {
                        "type": "string",
                        "description": "Specifies path to the file containing metadata about example parameter payloads.\r\nIf this setting is not specified, and DiscoverExamples is set to false, the compiler looks for a default file named examples.json\r\nin the specified examples directory. If DiscoverExamples is false, every time an example is used in the Swagger file,\r\nRESTler will first look for it in metadata, and, if found, the externally specified example will override the example from the specification.",
                        "nullable": true
                    },
                    "examplesDirectory": {
                        "type": "string",
                        "description": "Directory where the compiler will copy example payloads found in the Swagger file if DiscoverExamples is set to true.\r\nIf DiscoverExamples is set to false, RESTler tries to use examples in the metadata file configured in ExampleConfigFilePath.\r\nIf ExampleConfigFilePath is not set, then RESTler checks whether a file with the same name is present in the ExamplesDirectory, and, if it is found, uses this local file instead of the file referenced in the specification.\r\nThis directory allows first discovering examples, then updating the local copy of the examples with different values and maintaining them separately from the Swagger file.\r\nThe recommended way to use the updated examples in the compilation is to set DiscoverExamples to false and ExampleConfigFilePath to the generated examples.json in this directory.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "User-specified RESTler compiler configuration"
            },
            "ReplayConfiguration": {
                "type": "object",
                "properties": {
                    "bugBuckets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of paths to RESTler folder runs to replay (names of folders are assigned when mounted readonly/readwrite file share mounts).\r\nIf path is a folder, then all bug buckets replayed in the folder.\r\nIf path is a bug_bucket file - then only that file is replayed.\r\nIf empty - then replay all bugs under RunConfiguration.previousStepOutputFolderPath.",
                        "nullable": true
                    }                },
                "additionalProperties": false,
                "description": "RESTler configuration for replaying request sequences that triggered a reproducable bug"
            },
            "CheckerSettings": {
                "type": "object",
                "properties": {
                "mode": {
                    "type": "string",
                    "nullable": true
                }
                },
                "additionalProperties": false
            },
            "PerResourceSetting": {
                "type": "object",
                "properties": {
                "producerTimingDelay": {
                    "type": "integer",
                    "format": "int32"
                },
                "createOnce": {
                    "type": "boolean"
                },
                "customDictionary": {
                    "$ref": "#/components/schemas/CustomDictionary"
                }
                },
                "additionalProperties": false
            },
            "RunConfiguration": {
                "type": "object",
                "properties": {
                    "grammarPy": {
                        "type": "string",
                        "description": "Path to grammar py relative to compile folder path. If not set then default \"grammar.py\" grammar is assumed",
                        "nullable": true
                    },
                    "inputFolderPath": {
                        "type": "string",
                        "description": "For Test or Fuzz tasks: Grammar is produced by compile step. The compile step\r\nfile share is mounted and set here. Agent will not modify\r\nthis share. Agent will make a copy of all needed files to it's work directory.\r\nFor Replay task: path to RESTler Fuzz or Test run that contains bug buckets to replay",
                        "nullable": true
                    },
                    "producerTimingDelay": {
                        "type": "integer",
                        "description": "The delay in seconds after invoking an API that creates a new resource",
                        "format": "int32"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL when connecting to the server"
                    },
                    "showAuthToken": {
                        "type": "boolean",
                        "description": "Print authentication token value in RESTler network logs if set to true. Omit token from network logs if set to False or missing."
                    },
                    "authenticationTokenRefreshIntervalSeconds" : {
                        "type": "integer",
                        "description": "Authentication token refresh interval",
                        "format": "int32"
                    },
                    "pathRegex": {
                        "type": "string",
                        "description": "Path regex for filtering tested endpoints",
                        "nullable": true
                    },
                    "ignoreBugHashes" : {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of bug hashes to ignore when posting Bug Found webhook",
                        "nullable": true
                    },
                    "maxRequestExecutionTime":{
                        "type": "integer",
                        "description": "Maximum request execution time",
                        "format": "int32"
                    },
                    "ignoreDependencies":{
                        "type": "boolean",
                        "description": "Ignore resource dependencies"
                    },
                    "ignoreFeedback":{
                        "type": "boolean",
                        "description": "Ignore feedback from response"
                    },
                    "testAllCombinations":{
                        "type": "boolean",
                        "description": "By default, test mode will try to execute each request successfully once. This means that, if there are 5 possible values for a parameter, and the request\r\nis successfully executed when passing the first value, the remaining 4 will not be tested.\r\nIn some cases, such as for differential regression testing, it is desired to test all of the specified parameter values in Test mode.\r\nSetting TestAllCombinations to true in test mode in order to try all parameter values\r\n(up to max_combinations).\r\nResults for all parameter combinations will be reported in the spec coverage file."
                    },
                    "includeUserAgent":{
                        "type": "boolean",
                        "description": "Include RESTler user agent"
                    },
                    "maxAsyncResourceCreationTime":{
                        "type": "integer",
                        "description": "Maximum resource creation time",
                        "format": "int32"
                    },
                    "maxCombinations":{
                        "type": "integer",
                        "description": "Maximum number of permutations when constructing request combinations",
                        "format": "int32"
                    },
                    "maxSequenceLength" :{
                        "type": "integer",
                        "description": "Maximum sequence length of requests",
                        "format": "int32"
                    },
                    "waitForAsyncResourceCreation":{
                        "type": "boolean",
                        "description": "Wait for asynchronous resource creation"
                    },
                    "checkers": {
                        "type": "object",
                        "additionalProperties": {
                        "$ref": "#/components/schemas/CheckerSettings"
                        },
                        "nullable": true
                    },
                    "perResourceSettings": {
                        "type": "object",
                        "additionalProperties": {
                        "$ref": "#/components/schemas/PerResourceSetting"
                        },
                        "nullable": true
                    }                
                },
                "additionalProperties": false,
                "description": "RESTler job Test, Fuzz or Replay configuration"
            },
            "AgentConfiguration": {
                "type": "object",
                "properties": {
                    "resultsAnalyzerReportTimeSpanInterval": {
                        "type": "string",
                        "description": "How often to run result analyzer against RESTler logs. Default is every 1 minute.\r\nIf not set then result analyzer will run only once after RESTler task is over.",
                        "format": "date-span",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Configure behaviour of RESTler agent"
            },
            "RESTler": {
                "type": "object",
                "properties": {
                    "task": {
                        "type": "string",
						"description": "RESTLer task types",
                        "nullable": false,
                        "enum" : ["compile", "test", "fuzz", "replay", "testFuzzLean", "fuzzRandomWalk", "fuzzBfsCheap"]
                    },
                    "compileConfiguration": {
                        "$ref": "#/components/schemas/CompileConfiguration"
                    },
                    "runConfiguration": {
                        "$ref": "#/components/schemas/RunConfiguration"
                    },
                    "replayConfiguration": {
                        "$ref": "#/components/schemas/ReplayConfiguration"
                    },
                    "agentConfiguration": {
                        "$ref": "#/components/schemas/AgentConfiguration"
                    }
                },
                "additionalProperties": false,
				"description": "RESTler payload"
			}
        }
    }
}
